// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E477KV.proto

#ifndef PROTOBUF_INCLUDED_E477KV_2eproto
#define PROTOBUF_INCLUDED_E477KV_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_E477KV_2eproto 

namespace protobuf_E477KV_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_E477KV_2eproto
namespace E477KV {
class getRequest;
class getRequestDefaultTypeInternal;
extern getRequestDefaultTypeInternal _getRequest_default_instance_;
class getResponse;
class getResponseDefaultTypeInternal;
extern getResponseDefaultTypeInternal _getResponse_default_instance_;
class kvRequest;
class kvRequestDefaultTypeInternal;
extern kvRequestDefaultTypeInternal _kvRequest_default_instance_;
class kvResponse;
class kvResponseDefaultTypeInternal;
extern kvResponseDefaultTypeInternal _kvResponse_default_instance_;
class putRequest;
class putRequestDefaultTypeInternal;
extern putRequestDefaultTypeInternal _putRequest_default_instance_;
class putResponse;
class putResponseDefaultTypeInternal;
extern putResponseDefaultTypeInternal _putResponse_default_instance_;
}  // namespace E477KV
namespace google {
namespace protobuf {
template<> ::E477KV::getRequest* Arena::CreateMaybeMessage<::E477KV::getRequest>(Arena*);
template<> ::E477KV::getResponse* Arena::CreateMaybeMessage<::E477KV::getResponse>(Arena*);
template<> ::E477KV::kvRequest* Arena::CreateMaybeMessage<::E477KV::kvRequest>(Arena*);
template<> ::E477KV::kvResponse* Arena::CreateMaybeMessage<::E477KV::kvResponse>(Arena*);
template<> ::E477KV::putRequest* Arena::CreateMaybeMessage<::E477KV::putRequest>(Arena*);
template<> ::E477KV::putResponse* Arena::CreateMaybeMessage<::E477KV::putResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace E477KV {

// ===================================================================

class kvRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:E477KV.kvRequest) */ {
 public:
  kvRequest();
  virtual ~kvRequest();

  kvRequest(const kvRequest& from);

  inline kvRequest& operator=(const kvRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  kvRequest(kvRequest&& from) noexcept
    : kvRequest() {
    *this = ::std::move(from);
  }

  inline kvRequest& operator=(kvRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const kvRequest& default_instance();

  enum FunctionCase {
    kPutArgs = 4,
    kGetArgs = 5,
    FUNCTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const kvRequest* internal_default_instance() {
    return reinterpret_cast<const kvRequest*>(
               &_kvRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(kvRequest* other);
  friend void swap(kvRequest& a, kvRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline kvRequest* New() const final {
    return CreateMaybeMessage<kvRequest>(NULL);
  }

  kvRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<kvRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const kvRequest& from);
  void MergeFrom(const kvRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(kvRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 magic = 1;
  void clear_magic();
  static const int kMagicFieldNumber = 1;
  ::google::protobuf::uint32 magic() const;
  void set_magic(::google::protobuf::uint32 value);

  // uint32 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // uint32 serial = 3;
  void clear_serial();
  static const int kSerialFieldNumber = 3;
  ::google::protobuf::uint32 serial() const;
  void set_serial(::google::protobuf::uint32 value);

  // .E477KV.putRequest putArgs = 4;
  bool has_putargs() const;
  void clear_putargs();
  static const int kPutArgsFieldNumber = 4;
  private:
  const ::E477KV::putRequest& _internal_putargs() const;
  public:
  const ::E477KV::putRequest& putargs() const;
  ::E477KV::putRequest* release_putargs();
  ::E477KV::putRequest* mutable_putargs();
  void set_allocated_putargs(::E477KV::putRequest* putargs);

  // .E477KV.getRequest getArgs = 5;
  bool has_getargs() const;
  void clear_getargs();
  static const int kGetArgsFieldNumber = 5;
  private:
  const ::E477KV::getRequest& _internal_getargs() const;
  public:
  const ::E477KV::getRequest& getargs() const;
  ::E477KV::getRequest* release_getargs();
  ::E477KV::getRequest* mutable_getargs();
  void set_allocated_getargs(::E477KV::getRequest* getargs);

  void clear_function();
  FunctionCase function_case() const;
  // @@protoc_insertion_point(class_scope:E477KV.kvRequest)
 private:
  void set_has_putargs();
  void set_has_getargs();

  inline bool has_function() const;
  inline void clear_has_function();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 magic_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 serial_;
  union FunctionUnion {
    FunctionUnion() {}
    ::E477KV::putRequest* putargs_;
    ::E477KV::getRequest* getargs_;
  } function_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_E477KV_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class putRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:E477KV.putRequest) */ {
 public:
  putRequest();
  virtual ~putRequest();

  putRequest(const putRequest& from);

  inline putRequest& operator=(const putRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  putRequest(putRequest&& from) noexcept
    : putRequest() {
    *this = ::std::move(from);
  }

  inline putRequest& operator=(putRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const putRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const putRequest* internal_default_instance() {
    return reinterpret_cast<const putRequest*>(
               &_putRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(putRequest* other);
  friend void swap(putRequest& a, putRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline putRequest* New() const final {
    return CreateMaybeMessage<putRequest>(NULL);
  }

  putRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<putRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const putRequest& from);
  void MergeFrom(const putRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(putRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // int32 key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::google::protobuf::int32 key() const;
  void set_key(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:E477KV.putRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::int32 key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_E477KV_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class getRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:E477KV.getRequest) */ {
 public:
  getRequest();
  virtual ~getRequest();

  getRequest(const getRequest& from);

  inline getRequest& operator=(const getRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  getRequest(getRequest&& from) noexcept
    : getRequest() {
    *this = ::std::move(from);
  }

  inline getRequest& operator=(getRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const getRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const getRequest* internal_default_instance() {
    return reinterpret_cast<const getRequest*>(
               &_getRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(getRequest* other);
  friend void swap(getRequest& a, getRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline getRequest* New() const final {
    return CreateMaybeMessage<getRequest>(NULL);
  }

  getRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<getRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const getRequest& from);
  void MergeFrom(const getRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::google::protobuf::int32 key() const;
  void set_key(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:E477KV.getRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_E477KV_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class kvResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:E477KV.kvResponse) */ {
 public:
  kvResponse();
  virtual ~kvResponse();

  kvResponse(const kvResponse& from);

  inline kvResponse& operator=(const kvResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  kvResponse(kvResponse&& from) noexcept
    : kvResponse() {
    *this = ::std::move(from);
  }

  inline kvResponse& operator=(kvResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const kvResponse& default_instance();

  enum FunctionCase {
    kPutRes = 4,
    kGetRes = 5,
    FUNCTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const kvResponse* internal_default_instance() {
    return reinterpret_cast<const kvResponse*>(
               &_kvResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(kvResponse* other);
  friend void swap(kvResponse& a, kvResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline kvResponse* New() const final {
    return CreateMaybeMessage<kvResponse>(NULL);
  }

  kvResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<kvResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const kvResponse& from);
  void MergeFrom(const kvResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(kvResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 magic = 1;
  void clear_magic();
  static const int kMagicFieldNumber = 1;
  ::google::protobuf::uint32 magic() const;
  void set_magic(::google::protobuf::uint32 value);

  // uint32 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // uint32 serial = 3;
  void clear_serial();
  static const int kSerialFieldNumber = 3;
  ::google::protobuf::uint32 serial() const;
  void set_serial(::google::protobuf::uint32 value);

  // .E477KV.putResponse putRes = 4;
  bool has_putres() const;
  void clear_putres();
  static const int kPutResFieldNumber = 4;
  private:
  const ::E477KV::putResponse& _internal_putres() const;
  public:
  const ::E477KV::putResponse& putres() const;
  ::E477KV::putResponse* release_putres();
  ::E477KV::putResponse* mutable_putres();
  void set_allocated_putres(::E477KV::putResponse* putres);

  // .E477KV.getResponse getRes = 5;
  bool has_getres() const;
  void clear_getres();
  static const int kGetResFieldNumber = 5;
  private:
  const ::E477KV::getResponse& _internal_getres() const;
  public:
  const ::E477KV::getResponse& getres() const;
  ::E477KV::getResponse* release_getres();
  ::E477KV::getResponse* mutable_getres();
  void set_allocated_getres(::E477KV::getResponse* getres);

  void clear_function();
  FunctionCase function_case() const;
  // @@protoc_insertion_point(class_scope:E477KV.kvResponse)
 private:
  void set_has_putres();
  void set_has_getres();

  inline bool has_function() const;
  inline void clear_has_function();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 magic_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 serial_;
  union FunctionUnion {
    FunctionUnion() {}
    ::E477KV::putResponse* putres_;
    ::E477KV::getResponse* getres_;
  } function_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_E477KV_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class putResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:E477KV.putResponse) */ {
 public:
  putResponse();
  virtual ~putResponse();

  putResponse(const putResponse& from);

  inline putResponse& operator=(const putResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  putResponse(putResponse&& from) noexcept
    : putResponse() {
    *this = ::std::move(from);
  }

  inline putResponse& operator=(putResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const putResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const putResponse* internal_default_instance() {
    return reinterpret_cast<const putResponse*>(
               &_putResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(putResponse* other);
  friend void swap(putResponse& a, putResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline putResponse* New() const final {
    return CreateMaybeMessage<putResponse>(NULL);
  }

  putResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<putResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const putResponse& from);
  void MergeFrom(const putResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(putResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  bool status() const;
  void set_status(bool value);

  // @@protoc_insertion_point(class_scope:E477KV.putResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_E477KV_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class getResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:E477KV.getResponse) */ {
 public:
  getResponse();
  virtual ~getResponse();

  getResponse(const getResponse& from);

  inline getResponse& operator=(const getResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  getResponse(getResponse&& from) noexcept
    : getResponse() {
    *this = ::std::move(from);
  }

  inline getResponse& operator=(getResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const getResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const getResponse* internal_default_instance() {
    return reinterpret_cast<const getResponse*>(
               &_getResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(getResponse* other);
  friend void swap(getResponse& a, getResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline getResponse* New() const final {
    return CreateMaybeMessage<getResponse>(NULL);
  }

  getResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<getResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const getResponse& from);
  void MergeFrom(const getResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // bool status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  bool status() const;
  void set_status(bool value);

  // @@protoc_insertion_point(class_scope:E477KV.getResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  bool status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_E477KV_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// kvRequest

// uint32 magic = 1;
inline void kvRequest::clear_magic() {
  magic_ = 0u;
}
inline ::google::protobuf::uint32 kvRequest::magic() const {
  // @@protoc_insertion_point(field_get:E477KV.kvRequest.magic)
  return magic_;
}
inline void kvRequest::set_magic(::google::protobuf::uint32 value) {
  
  magic_ = value;
  // @@protoc_insertion_point(field_set:E477KV.kvRequest.magic)
}

// uint32 version = 2;
inline void kvRequest::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 kvRequest::version() const {
  // @@protoc_insertion_point(field_get:E477KV.kvRequest.version)
  return version_;
}
inline void kvRequest::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:E477KV.kvRequest.version)
}

// uint32 serial = 3;
inline void kvRequest::clear_serial() {
  serial_ = 0u;
}
inline ::google::protobuf::uint32 kvRequest::serial() const {
  // @@protoc_insertion_point(field_get:E477KV.kvRequest.serial)
  return serial_;
}
inline void kvRequest::set_serial(::google::protobuf::uint32 value) {
  
  serial_ = value;
  // @@protoc_insertion_point(field_set:E477KV.kvRequest.serial)
}

// .E477KV.putRequest putArgs = 4;
inline bool kvRequest::has_putargs() const {
  return function_case() == kPutArgs;
}
inline void kvRequest::set_has_putargs() {
  _oneof_case_[0] = kPutArgs;
}
inline void kvRequest::clear_putargs() {
  if (has_putargs()) {
    delete function_.putargs_;
    clear_has_function();
  }
}
inline const ::E477KV::putRequest& kvRequest::_internal_putargs() const {
  return *function_.putargs_;
}
inline ::E477KV::putRequest* kvRequest::release_putargs() {
  // @@protoc_insertion_point(field_release:E477KV.kvRequest.putArgs)
  if (has_putargs()) {
    clear_has_function();
      ::E477KV::putRequest* temp = function_.putargs_;
    function_.putargs_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::E477KV::putRequest& kvRequest::putargs() const {
  // @@protoc_insertion_point(field_get:E477KV.kvRequest.putArgs)
  return has_putargs()
      ? *function_.putargs_
      : *reinterpret_cast< ::E477KV::putRequest*>(&::E477KV::_putRequest_default_instance_);
}
inline ::E477KV::putRequest* kvRequest::mutable_putargs() {
  if (!has_putargs()) {
    clear_function();
    set_has_putargs();
    function_.putargs_ = CreateMaybeMessage< ::E477KV::putRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:E477KV.kvRequest.putArgs)
  return function_.putargs_;
}

// .E477KV.getRequest getArgs = 5;
inline bool kvRequest::has_getargs() const {
  return function_case() == kGetArgs;
}
inline void kvRequest::set_has_getargs() {
  _oneof_case_[0] = kGetArgs;
}
inline void kvRequest::clear_getargs() {
  if (has_getargs()) {
    delete function_.getargs_;
    clear_has_function();
  }
}
inline const ::E477KV::getRequest& kvRequest::_internal_getargs() const {
  return *function_.getargs_;
}
inline ::E477KV::getRequest* kvRequest::release_getargs() {
  // @@protoc_insertion_point(field_release:E477KV.kvRequest.getArgs)
  if (has_getargs()) {
    clear_has_function();
      ::E477KV::getRequest* temp = function_.getargs_;
    function_.getargs_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::E477KV::getRequest& kvRequest::getargs() const {
  // @@protoc_insertion_point(field_get:E477KV.kvRequest.getArgs)
  return has_getargs()
      ? *function_.getargs_
      : *reinterpret_cast< ::E477KV::getRequest*>(&::E477KV::_getRequest_default_instance_);
}
inline ::E477KV::getRequest* kvRequest::mutable_getargs() {
  if (!has_getargs()) {
    clear_function();
    set_has_getargs();
    function_.getargs_ = CreateMaybeMessage< ::E477KV::getRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:E477KV.kvRequest.getArgs)
  return function_.getargs_;
}

inline bool kvRequest::has_function() const {
  return function_case() != FUNCTION_NOT_SET;
}
inline void kvRequest::clear_has_function() {
  _oneof_case_[0] = FUNCTION_NOT_SET;
}
inline kvRequest::FunctionCase kvRequest::function_case() const {
  return kvRequest::FunctionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// putRequest

// int32 key = 1;
inline void putRequest::clear_key() {
  key_ = 0;
}
inline ::google::protobuf::int32 putRequest::key() const {
  // @@protoc_insertion_point(field_get:E477KV.putRequest.key)
  return key_;
}
inline void putRequest::set_key(::google::protobuf::int32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:E477KV.putRequest.key)
}

// bytes value = 2;
inline void putRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& putRequest::value() const {
  // @@protoc_insertion_point(field_get:E477KV.putRequest.value)
  return value_.GetNoArena();
}
inline void putRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:E477KV.putRequest.value)
}
#if LANG_CXX11
inline void putRequest::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:E477KV.putRequest.value)
}
#endif
inline void putRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:E477KV.putRequest.value)
}
inline void putRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:E477KV.putRequest.value)
}
inline ::std::string* putRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:E477KV.putRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* putRequest::release_value() {
  // @@protoc_insertion_point(field_release:E477KV.putRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void putRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:E477KV.putRequest.value)
}

// -------------------------------------------------------------------

// getRequest

// int32 key = 1;
inline void getRequest::clear_key() {
  key_ = 0;
}
inline ::google::protobuf::int32 getRequest::key() const {
  // @@protoc_insertion_point(field_get:E477KV.getRequest.key)
  return key_;
}
inline void getRequest::set_key(::google::protobuf::int32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:E477KV.getRequest.key)
}

// -------------------------------------------------------------------

// kvResponse

// uint32 magic = 1;
inline void kvResponse::clear_magic() {
  magic_ = 0u;
}
inline ::google::protobuf::uint32 kvResponse::magic() const {
  // @@protoc_insertion_point(field_get:E477KV.kvResponse.magic)
  return magic_;
}
inline void kvResponse::set_magic(::google::protobuf::uint32 value) {
  
  magic_ = value;
  // @@protoc_insertion_point(field_set:E477KV.kvResponse.magic)
}

// uint32 version = 2;
inline void kvResponse::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 kvResponse::version() const {
  // @@protoc_insertion_point(field_get:E477KV.kvResponse.version)
  return version_;
}
inline void kvResponse::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:E477KV.kvResponse.version)
}

// uint32 serial = 3;
inline void kvResponse::clear_serial() {
  serial_ = 0u;
}
inline ::google::protobuf::uint32 kvResponse::serial() const {
  // @@protoc_insertion_point(field_get:E477KV.kvResponse.serial)
  return serial_;
}
inline void kvResponse::set_serial(::google::protobuf::uint32 value) {
  
  serial_ = value;
  // @@protoc_insertion_point(field_set:E477KV.kvResponse.serial)
}

// .E477KV.putResponse putRes = 4;
inline bool kvResponse::has_putres() const {
  return function_case() == kPutRes;
}
inline void kvResponse::set_has_putres() {
  _oneof_case_[0] = kPutRes;
}
inline void kvResponse::clear_putres() {
  if (has_putres()) {
    delete function_.putres_;
    clear_has_function();
  }
}
inline const ::E477KV::putResponse& kvResponse::_internal_putres() const {
  return *function_.putres_;
}
inline ::E477KV::putResponse* kvResponse::release_putres() {
  // @@protoc_insertion_point(field_release:E477KV.kvResponse.putRes)
  if (has_putres()) {
    clear_has_function();
      ::E477KV::putResponse* temp = function_.putres_;
    function_.putres_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::E477KV::putResponse& kvResponse::putres() const {
  // @@protoc_insertion_point(field_get:E477KV.kvResponse.putRes)
  return has_putres()
      ? *function_.putres_
      : *reinterpret_cast< ::E477KV::putResponse*>(&::E477KV::_putResponse_default_instance_);
}
inline ::E477KV::putResponse* kvResponse::mutable_putres() {
  if (!has_putres()) {
    clear_function();
    set_has_putres();
    function_.putres_ = CreateMaybeMessage< ::E477KV::putResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:E477KV.kvResponse.putRes)
  return function_.putres_;
}

// .E477KV.getResponse getRes = 5;
inline bool kvResponse::has_getres() const {
  return function_case() == kGetRes;
}
inline void kvResponse::set_has_getres() {
  _oneof_case_[0] = kGetRes;
}
inline void kvResponse::clear_getres() {
  if (has_getres()) {
    delete function_.getres_;
    clear_has_function();
  }
}
inline const ::E477KV::getResponse& kvResponse::_internal_getres() const {
  return *function_.getres_;
}
inline ::E477KV::getResponse* kvResponse::release_getres() {
  // @@protoc_insertion_point(field_release:E477KV.kvResponse.getRes)
  if (has_getres()) {
    clear_has_function();
      ::E477KV::getResponse* temp = function_.getres_;
    function_.getres_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::E477KV::getResponse& kvResponse::getres() const {
  // @@protoc_insertion_point(field_get:E477KV.kvResponse.getRes)
  return has_getres()
      ? *function_.getres_
      : *reinterpret_cast< ::E477KV::getResponse*>(&::E477KV::_getResponse_default_instance_);
}
inline ::E477KV::getResponse* kvResponse::mutable_getres() {
  if (!has_getres()) {
    clear_function();
    set_has_getres();
    function_.getres_ = CreateMaybeMessage< ::E477KV::getResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:E477KV.kvResponse.getRes)
  return function_.getres_;
}

inline bool kvResponse::has_function() const {
  return function_case() != FUNCTION_NOT_SET;
}
inline void kvResponse::clear_has_function() {
  _oneof_case_[0] = FUNCTION_NOT_SET;
}
inline kvResponse::FunctionCase kvResponse::function_case() const {
  return kvResponse::FunctionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// putResponse

// bool status = 1;
inline void putResponse::clear_status() {
  status_ = false;
}
inline bool putResponse::status() const {
  // @@protoc_insertion_point(field_get:E477KV.putResponse.status)
  return status_;
}
inline void putResponse::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:E477KV.putResponse.status)
}

// -------------------------------------------------------------------

// getResponse

// bool status = 1;
inline void getResponse::clear_status() {
  status_ = false;
}
inline bool getResponse::status() const {
  // @@protoc_insertion_point(field_get:E477KV.getResponse.status)
  return status_;
}
inline void getResponse::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:E477KV.getResponse.status)
}

// bytes value = 2;
inline void getResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& getResponse::value() const {
  // @@protoc_insertion_point(field_get:E477KV.getResponse.value)
  return value_.GetNoArena();
}
inline void getResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:E477KV.getResponse.value)
}
#if LANG_CXX11
inline void getResponse::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:E477KV.getResponse.value)
}
#endif
inline void getResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:E477KV.getResponse.value)
}
inline void getResponse::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:E477KV.getResponse.value)
}
inline ::std::string* getResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:E477KV.getResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* getResponse::release_value() {
  // @@protoc_insertion_point(field_release:E477KV.getResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void getResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:E477KV.getResponse.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace E477KV

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_E477KV_2eproto
